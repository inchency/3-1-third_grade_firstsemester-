1.1 last-item
(defun last-item(x)
	(cond ((null (cdr x)) (car x))
	       (t (last-item(cdr x)))
	)
)

1.2 remove-1st
(defun remove-1st (atm lst)
	(cond 	((null (cdr lst)) (car lst))
		((equal atm (car lst)) (cdr lst))
		(t (cons (car lst) (remove-1st atm (cdr lst))))
	)
)
1.3 append1
(defun append1 (a b)
	(cond ((null (car a)) b)
	      ((null (cdr a)) (cons (car a) b))
	      (t (cons (car a) append1 (cdr a) b)))
	)
)
1.4 merge
(defun merge1(x y)
	(cond ((null (car x)) y)
	      ((null (car y)) x)
	      ((> (car x) (car y)) (cons (car y) (merge1 x (cdr y))))
	      ((<= (car x) (car y)) (cons (car x) (merge1 (cdr x) y)))
	)
)

1.5 subst-all
(defun subst-all (atm1 atm2 lst)
	(cond ((null (cdr lst)) (cond ((equal atm2 (car lst) atm1)) (t (car lst))))
	      ((equal atm2 (car lst)) (cons atm1 (subst-all atm1 atm2 (cdr lst))))
	      (t (cons (car lst) (subst-all atm1 atm2 (cdr lst))))
	)
)

2.1 count-all
(defun count-all (x)
	(cond ((null x) 0)
	      ((atom (car x)) (1+ (count-all(cdr x))))
	      (t (+ (count-all (car x)) (count-all (cdr x))))
	)
)

2.2 remove-all2
(defun remove-all2 (atm lst)
	(cond ((null (car lst)) nil)
	      ((not (atom (car lst))) (cons (remove-all2 atm (car lst)) (remove-all2 atm (cdr lst))))
	      (t (cond ((equal (car lst) atm) (remove-all2 atm (cdr lst)))
		       (t (cons (car lst) (remove-all2 atm (cdr lst))))
		 )
	      )
	)
)

2.3 reverse-all
(defun reverse-all (lst)
	(cond ((null (cdr lst)) (cond ((atom (car lst)) (car lst))
				      (t (reverse-all (car lst)))
				)
	      )
	      ((atom (car lst)) (cons (reverse-all (cdr lst)) (car lst)))
	      (t (cons (reverse-all (cdr lst)) (reverse-all (car lst))))
	)
)

2.4 depth
(defun depth (x)
   (cond ( (atom x) 0 )
         ( t (max (1+ (depth (car x))) (depth (cdr x))) )
   )
)


2.5 flatten
(defun flatten (x)
   (cond ( (null x) x )
	 ( (atom (car x)) (cons (car x) (flatten (cdr x))) )
	 ( t (append (flatten (car x)) (flatten (cdr x))) )
   )
)



















