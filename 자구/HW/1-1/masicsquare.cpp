/************************************************************************************
Name : 김동훈
Student ID : 20123339
Program ID : HW#1  Magic Square problem
Description : 배열의 크기 n 값을 받아들여서 (단 n은 1이상 && 홀수) 가로, 세로, 대각선의
			  합이 모두 일치 하게 해주는 프로그램이다.
Algorithm : 알고리즘은 처음 1을 첫행의 가운데 열 부분에 초기화 시켜놓고 왼쪽 위로 가면서
		    key 값을 1씩 증가하는 알고리즘이다. 만약 맨 위가 없으면 맨 아래로 보내고 만약 
			맨 왼쪽이 없으면 매 오른쪽으로 보낸다. 또한 왼쪽 위로 갔는데 숫자가 있으면 
			그 자리에서 아래쪽에 1증가한 key값을 입력한다. 이런 식으로 1부터 n*n의 수가 될
			때 까지 반복하며 n*n이 되면 숫자가 모두 채워진다.
Variables : void show() , void magic(int n), void main() 함수를 사용하였다
*************************************************************************************/

#include <iostream>
#define Max_Size 100
using namespace std;

/**************************************************************************************
function : void show()
description : n값을 입력받고 magic함수로 넘어간다.
variables : int n : 배열의 크기 n 값을 받는다.
*****************************************************************************************/
void show();
/**************************************************************************************
function : void magic(int n)
description : magic 함수는 show에서 받은 n값을 검사하는데 이 때 n 값이 1보다 작거나 짝수라면
			  다시 show 함수로 보내서 올바른 n 값을 받을 때 까지 무한 반복한다. 그리고
			  n을 올바르게 입력 하면 n에 맞는 매직 스퀘어 배열에 key값을 증가시키며 배열을
			  완성시킨 후 출력한다.
variables : int square[Max_Size][Max_Size] = { 0 }; : 2차원 배열을 0으로 초기화 시켜 준다.
			int k, l : 임시로 위치를 저장해주는 변수이다. 조건문을다 통과 한후 i와 j는 각각 k와 l로 초기화 된다.
			int key : 2부터 시작하며 배열의 한칸에 채워질 때마다 1씩 증가한다. 이 key값을 이용해
					  n*n까지 반복하는 while문을 사용한다.
			int i, j: i와 j는 현재 행과 열의 위치이다.
*****************************************************************************************/
void magic(int n);

/**************************************************************************************
function : main()
description : show 함수를 호출한다.
*****************************************************************************************/
void main() {
	show();
}


void show() {
	int n=0;
	cout << "매직스퀘어의 n의 크기를 입력해 주세요. 단 n은 1이상이여야 하고 홀수여야함" << endl;
	cin >> n;
	magic(n);
}


void magic(int n) {
	
	int square[Max_Size][Max_Size] = { 0 }; 	//square을 (0)으로 초기화

	// n이 올바른 값인지 검사
	if (n < 1 || n % 2 == 0) { // n은 1이상이여야 하고 홀수여야만 한다.
		cout << "n의 수를 다시 설정해 주세요." << endl;
		show();
	}
	else {
		int k;
		int l;

		square[0][(n - 1) / 2] = 1; // 첫행의 중간 = 1로 초기화

									
		int key = 2;
		int i = 0;                 // i와 j는 현재 위치
		int j = (n - 1) / 2;

		while (key <= n*n) { //n*n의 수가 될 때까지 왼쪽위로 이동한다.
			if (i - 1 < 0) // 행이 벗어난 경우
				k = n - 1; // 맨 아래쪽으로 이동
			else
				k = i - 1; // 한칸 위로 이동
			if (j - 1 < 0) // 열이 벗어난 경우
				l = n - 1; // 맨 우측으로 이동
			else
				l = j - 1; // 한칸 좌측으로 이동

			if (square[k][l]) // 이동했는데 만약 채워져 있으면
				i = (i + 1) % n; // 한칸 아래로 이동
			else { // 이동했는데 채워져 있지 않으면
				i = k;
				j = l;
			}
			square[i][j] = key; // key 값을 저장
			key++;
		}

		for (int i = 0; i < n; i++) { // 매직스퀘어를 출력하는 부분
			for (int j = 0; j < n; j++) {
				cout << square[i][j] << " ";
			}
			cout << endl;
		}
	}
}